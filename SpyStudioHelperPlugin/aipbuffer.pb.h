// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aipbuffer.proto

#ifndef PROTOBUF_aipbuffer_2eproto__INCLUDED
#define PROTOBUF_aipbuffer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_aipbuffer_2eproto();
void protobuf_AssignDesc_aipbuffer_2eproto();
void protobuf_ShutdownFile_aipbuffer_2eproto();

class AipBuffer;

// ===================================================================

class AipBuffer : public ::google::protobuf::Message {
 public:
  AipBuffer();
  virtual ~AipBuffer();

  AipBuffer(const AipBuffer& from);

  inline AipBuffer& operator=(const AipBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AipBuffer& default_instance();

  void Swap(AipBuffer* other);

  // implements Message ----------------------------------------------

  inline AipBuffer* New() const { return New(NULL); }

  AipBuffer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AipBuffer& from);
  void MergeFrom(const AipBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AipBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ServerPid = 1;
  bool has_serverpid() const;
  void clear_serverpid();
  static const int kServerPidFieldNumber = 1;
  ::google::protobuf::uint32 serverpid() const;
  void set_serverpid(::google::protobuf::uint32 value);

  // required uint32 HookFlags = 2;
  bool has_hookflags() const;
  void clear_hookflags();
  static const int kHookFlagsFieldNumber = 2;
  ::google::protobuf::uint32 hookflags() const;
  void set_hookflags(::google::protobuf::uint32 value);

  // optional uint64 PrimaryHook = 3;
  bool has_primaryhook() const;
  void clear_primaryhook();
  static const int kPrimaryHookFieldNumber = 3;
  ::google::protobuf::uint64 primaryhook() const;
  void set_primaryhook(::google::protobuf::uint64 value);

  // optional string Xml = 4;
  bool has_xml() const;
  void clear_xml();
  static const int kXmlFieldNumber = 4;
  const ::std::string& xml() const;
  void set_xml(const ::std::string& value);
  void set_xml(const char* value);
  void set_xml(const char* value, size_t size);
  ::std::string* mutable_xml();
  ::std::string* release_xml();
  void set_allocated_xml(::std::string* xml);

  // repeated uint32 Offsets32 = 5;
  int offsets32_size() const;
  void clear_offsets32();
  static const int kOffsets32FieldNumber = 5;
  ::google::protobuf::uint32 offsets32(int index) const;
  void set_offsets32(int index, ::google::protobuf::uint32 value);
  void add_offsets32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offsets32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offsets32();

  // optional bytes Buffer32 = 6;
  bool has_buffer32() const;
  void clear_buffer32();
  static const int kBuffer32FieldNumber = 6;
  const ::std::string& buffer32() const;
  void set_buffer32(const ::std::string& value);
  void set_buffer32(const char* value);
  void set_buffer32(const void* value, size_t size);
  ::std::string* mutable_buffer32();
  ::std::string* release_buffer32();
  void set_allocated_buffer32(::std::string* buffer32);

  // repeated uint32 Offsets64 = 7;
  int offsets64_size() const;
  void clear_offsets64();
  static const int kOffsets64FieldNumber = 7;
  ::google::protobuf::uint32 offsets64(int index) const;
  void set_offsets64(int index, ::google::protobuf::uint32 value);
  void add_offsets64(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offsets64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offsets64();

  // optional bytes Buffer64 = 8;
  bool has_buffer64() const;
  void clear_buffer64();
  static const int kBuffer64FieldNumber = 8;
  const ::std::string& buffer64() const;
  void set_buffer64(const ::std::string& value);
  void set_buffer64(const char* value);
  void set_buffer64(const void* value, size_t size);
  ::std::string* mutable_buffer64();
  ::std::string* release_buffer64();
  void set_allocated_buffer64(::std::string* buffer64);

  // repeated string SystemModules = 9;
  int systemmodules_size() const;
  void clear_systemmodules();
  static const int kSystemModulesFieldNumber = 9;
  const ::std::string& systemmodules(int index) const;
  ::std::string* mutable_systemmodules(int index);
  void set_systemmodules(int index, const ::std::string& value);
  void set_systemmodules(int index, const char* value);
  void set_systemmodules(int index, const char* value, size_t size);
  ::std::string* add_systemmodules();
  void add_systemmodules(const ::std::string& value);
  void add_systemmodules(const char* value);
  void add_systemmodules(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& systemmodules() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_systemmodules();

  // @@protoc_insertion_point(class_scope:AipBuffer)
 private:
  inline void set_has_serverpid();
  inline void clear_has_serverpid();
  inline void set_has_hookflags();
  inline void clear_has_hookflags();
  inline void set_has_primaryhook();
  inline void clear_has_primaryhook();
  inline void set_has_xml();
  inline void clear_has_xml();
  inline void set_has_buffer32();
  inline void clear_has_buffer32();
  inline void set_has_buffer64();
  inline void clear_has_buffer64();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serverpid_;
  ::google::protobuf::uint32 hookflags_;
  ::google::protobuf::uint64 primaryhook_;
  ::google::protobuf::internal::ArenaStringPtr xml_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offsets32_;
  ::google::protobuf::internal::ArenaStringPtr buffer32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offsets64_;
  ::google::protobuf::internal::ArenaStringPtr buffer64_;
  ::google::protobuf::RepeatedPtrField< ::std::string> systemmodules_;
  friend void  protobuf_AddDesc_aipbuffer_2eproto();
  friend void protobuf_AssignDesc_aipbuffer_2eproto();
  friend void protobuf_ShutdownFile_aipbuffer_2eproto();

  void InitAsDefaultInstance();
  static AipBuffer* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AipBuffer

// required uint32 ServerPid = 1;
inline bool AipBuffer::has_serverpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AipBuffer::set_has_serverpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AipBuffer::clear_has_serverpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AipBuffer::clear_serverpid() {
  serverpid_ = 0u;
  clear_has_serverpid();
}
inline ::google::protobuf::uint32 AipBuffer::serverpid() const {
  // @@protoc_insertion_point(field_get:AipBuffer.ServerPid)
  return serverpid_;
}
inline void AipBuffer::set_serverpid(::google::protobuf::uint32 value) {
  set_has_serverpid();
  serverpid_ = value;
  // @@protoc_insertion_point(field_set:AipBuffer.ServerPid)
}

// required uint32 HookFlags = 2;
inline bool AipBuffer::has_hookflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AipBuffer::set_has_hookflags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AipBuffer::clear_has_hookflags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AipBuffer::clear_hookflags() {
  hookflags_ = 0u;
  clear_has_hookflags();
}
inline ::google::protobuf::uint32 AipBuffer::hookflags() const {
  // @@protoc_insertion_point(field_get:AipBuffer.HookFlags)
  return hookflags_;
}
inline void AipBuffer::set_hookflags(::google::protobuf::uint32 value) {
  set_has_hookflags();
  hookflags_ = value;
  // @@protoc_insertion_point(field_set:AipBuffer.HookFlags)
}

// optional uint64 PrimaryHook = 3;
inline bool AipBuffer::has_primaryhook() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AipBuffer::set_has_primaryhook() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AipBuffer::clear_has_primaryhook() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AipBuffer::clear_primaryhook() {
  primaryhook_ = GOOGLE_ULONGLONG(0);
  clear_has_primaryhook();
}
inline ::google::protobuf::uint64 AipBuffer::primaryhook() const {
  // @@protoc_insertion_point(field_get:AipBuffer.PrimaryHook)
  return primaryhook_;
}
inline void AipBuffer::set_primaryhook(::google::protobuf::uint64 value) {
  set_has_primaryhook();
  primaryhook_ = value;
  // @@protoc_insertion_point(field_set:AipBuffer.PrimaryHook)
}

// optional string Xml = 4;
inline bool AipBuffer::has_xml() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AipBuffer::set_has_xml() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AipBuffer::clear_has_xml() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AipBuffer::clear_xml() {
  xml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml();
}
inline const ::std::string& AipBuffer::xml() const {
  // @@protoc_insertion_point(field_get:AipBuffer.Xml)
  return xml_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AipBuffer::set_xml(const ::std::string& value) {
  set_has_xml();
  xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AipBuffer.Xml)
}
inline void AipBuffer::set_xml(const char* value) {
  set_has_xml();
  xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AipBuffer.Xml)
}
inline void AipBuffer::set_xml(const char* value, size_t size) {
  set_has_xml();
  xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.Xml)
}
inline ::std::string* AipBuffer::mutable_xml() {
  set_has_xml();
  // @@protoc_insertion_point(field_mutable:AipBuffer.Xml)
  return xml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AipBuffer::release_xml() {
  clear_has_xml();
  return xml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AipBuffer::set_allocated_xml(::std::string* xml) {
  if (xml != NULL) {
    set_has_xml();
  } else {
    clear_has_xml();
  }
  xml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml);
  // @@protoc_insertion_point(field_set_allocated:AipBuffer.Xml)
}

// repeated uint32 Offsets32 = 5;
inline int AipBuffer::offsets32_size() const {
  return offsets32_.size();
}
inline void AipBuffer::clear_offsets32() {
  offsets32_.Clear();
}
inline ::google::protobuf::uint32 AipBuffer::offsets32(int index) const {
  // @@protoc_insertion_point(field_get:AipBuffer.Offsets32)
  return offsets32_.Get(index);
}
inline void AipBuffer::set_offsets32(int index, ::google::protobuf::uint32 value) {
  offsets32_.Set(index, value);
  // @@protoc_insertion_point(field_set:AipBuffer.Offsets32)
}
inline void AipBuffer::add_offsets32(::google::protobuf::uint32 value) {
  offsets32_.Add(value);
  // @@protoc_insertion_point(field_add:AipBuffer.Offsets32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AipBuffer::offsets32() const {
  // @@protoc_insertion_point(field_list:AipBuffer.Offsets32)
  return offsets32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AipBuffer::mutable_offsets32() {
  // @@protoc_insertion_point(field_mutable_list:AipBuffer.Offsets32)
  return &offsets32_;
}

// optional bytes Buffer32 = 6;
inline bool AipBuffer::has_buffer32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AipBuffer::set_has_buffer32() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AipBuffer::clear_has_buffer32() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AipBuffer::clear_buffer32() {
  buffer32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer32();
}
inline const ::std::string& AipBuffer::buffer32() const {
  // @@protoc_insertion_point(field_get:AipBuffer.Buffer32)
  return buffer32_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AipBuffer::set_buffer32(const ::std::string& value) {
  set_has_buffer32();
  buffer32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AipBuffer.Buffer32)
}
inline void AipBuffer::set_buffer32(const char* value) {
  set_has_buffer32();
  buffer32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AipBuffer.Buffer32)
}
inline void AipBuffer::set_buffer32(const void* value, size_t size) {
  set_has_buffer32();
  buffer32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.Buffer32)
}
inline ::std::string* AipBuffer::mutable_buffer32() {
  set_has_buffer32();
  // @@protoc_insertion_point(field_mutable:AipBuffer.Buffer32)
  return buffer32_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AipBuffer::release_buffer32() {
  clear_has_buffer32();
  return buffer32_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AipBuffer::set_allocated_buffer32(::std::string* buffer32) {
  if (buffer32 != NULL) {
    set_has_buffer32();
  } else {
    clear_has_buffer32();
  }
  buffer32_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer32);
  // @@protoc_insertion_point(field_set_allocated:AipBuffer.Buffer32)
}

// repeated uint32 Offsets64 = 7;
inline int AipBuffer::offsets64_size() const {
  return offsets64_.size();
}
inline void AipBuffer::clear_offsets64() {
  offsets64_.Clear();
}
inline ::google::protobuf::uint32 AipBuffer::offsets64(int index) const {
  // @@protoc_insertion_point(field_get:AipBuffer.Offsets64)
  return offsets64_.Get(index);
}
inline void AipBuffer::set_offsets64(int index, ::google::protobuf::uint32 value) {
  offsets64_.Set(index, value);
  // @@protoc_insertion_point(field_set:AipBuffer.Offsets64)
}
inline void AipBuffer::add_offsets64(::google::protobuf::uint32 value) {
  offsets64_.Add(value);
  // @@protoc_insertion_point(field_add:AipBuffer.Offsets64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AipBuffer::offsets64() const {
  // @@protoc_insertion_point(field_list:AipBuffer.Offsets64)
  return offsets64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AipBuffer::mutable_offsets64() {
  // @@protoc_insertion_point(field_mutable_list:AipBuffer.Offsets64)
  return &offsets64_;
}

// optional bytes Buffer64 = 8;
inline bool AipBuffer::has_buffer64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AipBuffer::set_has_buffer64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AipBuffer::clear_has_buffer64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AipBuffer::clear_buffer64() {
  buffer64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer64();
}
inline const ::std::string& AipBuffer::buffer64() const {
  // @@protoc_insertion_point(field_get:AipBuffer.Buffer64)
  return buffer64_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AipBuffer::set_buffer64(const ::std::string& value) {
  set_has_buffer64();
  buffer64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AipBuffer.Buffer64)
}
inline void AipBuffer::set_buffer64(const char* value) {
  set_has_buffer64();
  buffer64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AipBuffer.Buffer64)
}
inline void AipBuffer::set_buffer64(const void* value, size_t size) {
  set_has_buffer64();
  buffer64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.Buffer64)
}
inline ::std::string* AipBuffer::mutable_buffer64() {
  set_has_buffer64();
  // @@protoc_insertion_point(field_mutable:AipBuffer.Buffer64)
  return buffer64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AipBuffer::release_buffer64() {
  clear_has_buffer64();
  return buffer64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AipBuffer::set_allocated_buffer64(::std::string* buffer64) {
  if (buffer64 != NULL) {
    set_has_buffer64();
  } else {
    clear_has_buffer64();
  }
  buffer64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer64);
  // @@protoc_insertion_point(field_set_allocated:AipBuffer.Buffer64)
}

// repeated string SystemModules = 9;
inline int AipBuffer::systemmodules_size() const {
  return systemmodules_.size();
}
inline void AipBuffer::clear_systemmodules() {
  systemmodules_.Clear();
}
inline const ::std::string& AipBuffer::systemmodules(int index) const {
  // @@protoc_insertion_point(field_get:AipBuffer.SystemModules)
  return systemmodules_.Get(index);
}
inline ::std::string* AipBuffer::mutable_systemmodules(int index) {
  // @@protoc_insertion_point(field_mutable:AipBuffer.SystemModules)
  return systemmodules_.Mutable(index);
}
inline void AipBuffer::set_systemmodules(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AipBuffer.SystemModules)
  systemmodules_.Mutable(index)->assign(value);
}
inline void AipBuffer::set_systemmodules(int index, const char* value) {
  systemmodules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AipBuffer.SystemModules)
}
inline void AipBuffer::set_systemmodules(int index, const char* value, size_t size) {
  systemmodules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.SystemModules)
}
inline ::std::string* AipBuffer::add_systemmodules() {
  return systemmodules_.Add();
}
inline void AipBuffer::add_systemmodules(const ::std::string& value) {
  systemmodules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AipBuffer.SystemModules)
}
inline void AipBuffer::add_systemmodules(const char* value) {
  systemmodules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AipBuffer.SystemModules)
}
inline void AipBuffer::add_systemmodules(const char* value, size_t size) {
  systemmodules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AipBuffer.SystemModules)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AipBuffer::systemmodules() const {
  // @@protoc_insertion_point(field_list:AipBuffer.SystemModules)
  return systemmodules_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AipBuffer::mutable_systemmodules() {
  // @@protoc_insertion_point(field_mutable_list:AipBuffer.SystemModules)
  return &systemmodules_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aipbuffer_2eproto__INCLUDED
