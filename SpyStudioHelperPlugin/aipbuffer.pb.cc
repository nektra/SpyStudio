// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aipbuffer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aipbuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AipBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AipBuffer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aipbuffer_2eproto() {
  protobuf_AddDesc_aipbuffer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aipbuffer.proto");
  GOOGLE_CHECK(file != NULL);
  AipBuffer_descriptor_ = file->message_type(0);
  static const int AipBuffer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, serverpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, hookflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, primaryhook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, offsets32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, buffer32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, offsets64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, buffer64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, systemmodules_),
  };
  AipBuffer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AipBuffer_descriptor_,
      AipBuffer::default_instance_,
      AipBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, _has_bits_[0]),
      -1,
      -1,
      sizeof(AipBuffer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AipBuffer, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aipbuffer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AipBuffer_descriptor_, &AipBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aipbuffer_2eproto() {
  delete AipBuffer::default_instance_;
  delete AipBuffer_reflection_;
}

void protobuf_AddDesc_aipbuffer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017aipbuffer.proto\"\264\001\n\tAipBuffer\022\021\n\tServe"
    "rPid\030\001 \002(\r\022\021\n\tHookFlags\030\002 \002(\r\022\023\n\013Primary"
    "Hook\030\003 \001(\004\022\013\n\003Xml\030\004 \001(\t\022\021\n\tOffsets32\030\005 \003"
    "(\r\022\020\n\010Buffer32\030\006 \001(\014\022\021\n\tOffsets64\030\007 \003(\r\022"
    "\020\n\010Buffer64\030\010 \001(\014\022\025\n\rSystemModules\030\t \003(\t", 200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aipbuffer.proto", &protobuf_RegisterTypes);
  AipBuffer::default_instance_ = new AipBuffer();
  AipBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aipbuffer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aipbuffer_2eproto {
  StaticDescriptorInitializer_aipbuffer_2eproto() {
    protobuf_AddDesc_aipbuffer_2eproto();
  }
} static_descriptor_initializer_aipbuffer_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AipBuffer::kServerPidFieldNumber;
const int AipBuffer::kHookFlagsFieldNumber;
const int AipBuffer::kPrimaryHookFieldNumber;
const int AipBuffer::kXmlFieldNumber;
const int AipBuffer::kOffsets32FieldNumber;
const int AipBuffer::kBuffer32FieldNumber;
const int AipBuffer::kOffsets64FieldNumber;
const int AipBuffer::kBuffer64FieldNumber;
const int AipBuffer::kSystemModulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AipBuffer::AipBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AipBuffer)
}

void AipBuffer::InitAsDefaultInstance() {
}

AipBuffer::AipBuffer(const AipBuffer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AipBuffer)
}

void AipBuffer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverpid_ = 0u;
  hookflags_ = 0u;
  primaryhook_ = GOOGLE_ULONGLONG(0);
  xml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer32_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AipBuffer::~AipBuffer() {
  // @@protoc_insertion_point(destructor:AipBuffer)
  SharedDtor();
}

void AipBuffer::SharedDtor() {
  xml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer32_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer64_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AipBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AipBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AipBuffer_descriptor_;
}

const AipBuffer& AipBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aipbuffer_2eproto();
  return *default_instance_;
}

AipBuffer* AipBuffer::default_instance_ = NULL;

AipBuffer* AipBuffer::New(::google::protobuf::Arena* arena) const {
  AipBuffer* n = new AipBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AipBuffer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AipBuffer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 175u) {
    ZR_(serverpid_, primaryhook_);
    if (has_xml()) {
      xml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buffer32()) {
      buffer32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buffer64()) {
      buffer64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  offsets32_.Clear();
  offsets64_.Clear();
  systemmodules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AipBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AipBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ServerPid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverpid_)));
          set_has_serverpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HookFlags;
        break;
      }

      // required uint32 HookFlags = 2;
      case 2: {
        if (tag == 16) {
         parse_HookFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hookflags_)));
          set_has_hookflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PrimaryHook;
        break;
      }

      // optional uint64 PrimaryHook = 3;
      case 3: {
        if (tag == 24) {
         parse_PrimaryHook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primaryhook_)));
          set_has_primaryhook();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Xml;
        break;
      }

      // optional string Xml = 4;
      case 4: {
        if (tag == 34) {
         parse_Xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xml().data(), this->xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AipBuffer.Xml");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Offsets32;
        break;
      }

      // repeated uint32 Offsets32 = 5;
      case 5: {
        if (tag == 40) {
         parse_Offsets32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_offsets32())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offsets32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Offsets32;
        if (input->ExpectTag(50)) goto parse_Buffer32;
        break;
      }

      // optional bytes Buffer32 = 6;
      case 6: {
        if (tag == 50) {
         parse_Buffer32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Offsets64;
        break;
      }

      // repeated uint32 Offsets64 = 7;
      case 7: {
        if (tag == 56) {
         parse_Offsets64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_offsets64())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offsets64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Offsets64;
        if (input->ExpectTag(66)) goto parse_Buffer64;
        break;
      }

      // optional bytes Buffer64 = 8;
      case 8: {
        if (tag == 66) {
         parse_Buffer64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SystemModules;
        break;
      }

      // repeated string SystemModules = 9;
      case 9: {
        if (tag == 74) {
         parse_SystemModules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_systemmodules()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->systemmodules(this->systemmodules_size() - 1).data(),
            this->systemmodules(this->systemmodules_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AipBuffer.SystemModules");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SystemModules;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AipBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AipBuffer)
  return false;
#undef DO_
}

void AipBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AipBuffer)
  // required uint32 ServerPid = 1;
  if (has_serverpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverpid(), output);
  }

  // required uint32 HookFlags = 2;
  if (has_hookflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hookflags(), output);
  }

  // optional uint64 PrimaryHook = 3;
  if (has_primaryhook()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->primaryhook(), output);
  }

  // optional string Xml = 4;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AipBuffer.Xml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xml(), output);
  }

  // repeated uint32 Offsets32 = 5;
  for (int i = 0; i < this->offsets32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->offsets32(i), output);
  }

  // optional bytes Buffer32 = 6;
  if (has_buffer32()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->buffer32(), output);
  }

  // repeated uint32 Offsets64 = 7;
  for (int i = 0; i < this->offsets64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->offsets64(i), output);
  }

  // optional bytes Buffer64 = 8;
  if (has_buffer64()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->buffer64(), output);
  }

  // repeated string SystemModules = 9;
  for (int i = 0; i < this->systemmodules_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemmodules(i).data(), this->systemmodules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AipBuffer.SystemModules");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->systemmodules(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AipBuffer)
}

::google::protobuf::uint8* AipBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AipBuffer)
  // required uint32 ServerPid = 1;
  if (has_serverpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverpid(), target);
  }

  // required uint32 HookFlags = 2;
  if (has_hookflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hookflags(), target);
  }

  // optional uint64 PrimaryHook = 3;
  if (has_primaryhook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->primaryhook(), target);
  }

  // optional string Xml = 4;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AipBuffer.Xml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->xml(), target);
  }

  // repeated uint32 Offsets32 = 5;
  for (int i = 0; i < this->offsets32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->offsets32(i), target);
  }

  // optional bytes Buffer32 = 6;
  if (has_buffer32()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->buffer32(), target);
  }

  // repeated uint32 Offsets64 = 7;
  for (int i = 0; i < this->offsets64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->offsets64(i), target);
  }

  // optional bytes Buffer64 = 8;
  if (has_buffer64()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->buffer64(), target);
  }

  // repeated string SystemModules = 9;
  for (int i = 0; i < this->systemmodules_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemmodules(i).data(), this->systemmodules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AipBuffer.SystemModules");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->systemmodules(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AipBuffer)
  return target;
}

int AipBuffer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_serverpid()) {
    // required uint32 ServerPid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverpid());
  }

  if (has_hookflags()) {
    // required uint32 HookFlags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hookflags());
  }

  return total_size;
}
int AipBuffer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ServerPid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverpid());

    // required uint32 HookFlags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hookflags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 172u) {
    // optional uint64 PrimaryHook = 3;
    if (has_primaryhook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primaryhook());
    }

    // optional string Xml = 4;
    if (has_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml());
    }

    // optional bytes Buffer32 = 6;
    if (has_buffer32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer32());
    }

    // optional bytes Buffer64 = 8;
    if (has_buffer64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer64());
    }

  }
  // repeated uint32 Offsets32 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->offsets32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offsets32(i));
    }
    total_size += 1 * this->offsets32_size() + data_size;
  }

  // repeated uint32 Offsets64 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->offsets64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offsets64(i));
    }
    total_size += 1 * this->offsets64_size() + data_size;
  }

  // repeated string SystemModules = 9;
  total_size += 1 * this->systemmodules_size();
  for (int i = 0; i < this->systemmodules_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->systemmodules(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AipBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AipBuffer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AipBuffer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AipBuffer::MergeFrom(const AipBuffer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  offsets32_.MergeFrom(from.offsets32_);
  offsets64_.MergeFrom(from.offsets64_);
  systemmodules_.MergeFrom(from.systemmodules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverpid()) {
      set_serverpid(from.serverpid());
    }
    if (from.has_hookflags()) {
      set_hookflags(from.hookflags());
    }
    if (from.has_primaryhook()) {
      set_primaryhook(from.primaryhook());
    }
    if (from.has_xml()) {
      set_has_xml();
      xml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xml_);
    }
    if (from.has_buffer32()) {
      set_has_buffer32();
      buffer32_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer32_);
    }
    if (from.has_buffer64()) {
      set_has_buffer64();
      buffer64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer64_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AipBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AipBuffer::CopyFrom(const AipBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AipBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AipBuffer::Swap(AipBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AipBuffer::InternalSwap(AipBuffer* other) {
  std::swap(serverpid_, other->serverpid_);
  std::swap(hookflags_, other->hookflags_);
  std::swap(primaryhook_, other->primaryhook_);
  xml_.Swap(&other->xml_);
  offsets32_.UnsafeArenaSwap(&other->offsets32_);
  buffer32_.Swap(&other->buffer32_);
  offsets64_.UnsafeArenaSwap(&other->offsets64_);
  buffer64_.Swap(&other->buffer64_);
  systemmodules_.UnsafeArenaSwap(&other->systemmodules_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AipBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AipBuffer_descriptor_;
  metadata.reflection = AipBuffer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AipBuffer

// required uint32 ServerPid = 1;
bool AipBuffer::has_serverpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AipBuffer::set_has_serverpid() {
  _has_bits_[0] |= 0x00000001u;
}
void AipBuffer::clear_has_serverpid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AipBuffer::clear_serverpid() {
  serverpid_ = 0u;
  clear_has_serverpid();
}
 ::google::protobuf::uint32 AipBuffer::serverpid() const {
  // @@protoc_insertion_point(field_get:AipBuffer.ServerPid)
  return serverpid_;
}
 void AipBuffer::set_serverpid(::google::protobuf::uint32 value) {
  set_has_serverpid();
  serverpid_ = value;
  // @@protoc_insertion_point(field_set:AipBuffer.ServerPid)
}

// required uint32 HookFlags = 2;
bool AipBuffer::has_hookflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AipBuffer::set_has_hookflags() {
  _has_bits_[0] |= 0x00000002u;
}
void AipBuffer::clear_has_hookflags() {
  _has_bits_[0] &= ~0x00000002u;
}
void AipBuffer::clear_hookflags() {
  hookflags_ = 0u;
  clear_has_hookflags();
}
 ::google::protobuf::uint32 AipBuffer::hookflags() const {
  // @@protoc_insertion_point(field_get:AipBuffer.HookFlags)
  return hookflags_;
}
 void AipBuffer::set_hookflags(::google::protobuf::uint32 value) {
  set_has_hookflags();
  hookflags_ = value;
  // @@protoc_insertion_point(field_set:AipBuffer.HookFlags)
}

// optional uint64 PrimaryHook = 3;
bool AipBuffer::has_primaryhook() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AipBuffer::set_has_primaryhook() {
  _has_bits_[0] |= 0x00000004u;
}
void AipBuffer::clear_has_primaryhook() {
  _has_bits_[0] &= ~0x00000004u;
}
void AipBuffer::clear_primaryhook() {
  primaryhook_ = GOOGLE_ULONGLONG(0);
  clear_has_primaryhook();
}
 ::google::protobuf::uint64 AipBuffer::primaryhook() const {
  // @@protoc_insertion_point(field_get:AipBuffer.PrimaryHook)
  return primaryhook_;
}
 void AipBuffer::set_primaryhook(::google::protobuf::uint64 value) {
  set_has_primaryhook();
  primaryhook_ = value;
  // @@protoc_insertion_point(field_set:AipBuffer.PrimaryHook)
}

// optional string Xml = 4;
bool AipBuffer::has_xml() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AipBuffer::set_has_xml() {
  _has_bits_[0] |= 0x00000008u;
}
void AipBuffer::clear_has_xml() {
  _has_bits_[0] &= ~0x00000008u;
}
void AipBuffer::clear_xml() {
  xml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml();
}
 const ::std::string& AipBuffer::xml() const {
  // @@protoc_insertion_point(field_get:AipBuffer.Xml)
  return xml_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AipBuffer::set_xml(const ::std::string& value) {
  set_has_xml();
  xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AipBuffer.Xml)
}
 void AipBuffer::set_xml(const char* value) {
  set_has_xml();
  xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AipBuffer.Xml)
}
 void AipBuffer::set_xml(const char* value, size_t size) {
  set_has_xml();
  xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.Xml)
}
 ::std::string* AipBuffer::mutable_xml() {
  set_has_xml();
  // @@protoc_insertion_point(field_mutable:AipBuffer.Xml)
  return xml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AipBuffer::release_xml() {
  clear_has_xml();
  return xml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AipBuffer::set_allocated_xml(::std::string* xml) {
  if (xml != NULL) {
    set_has_xml();
  } else {
    clear_has_xml();
  }
  xml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml);
  // @@protoc_insertion_point(field_set_allocated:AipBuffer.Xml)
}

// repeated uint32 Offsets32 = 5;
int AipBuffer::offsets32_size() const {
  return offsets32_.size();
}
void AipBuffer::clear_offsets32() {
  offsets32_.Clear();
}
 ::google::protobuf::uint32 AipBuffer::offsets32(int index) const {
  // @@protoc_insertion_point(field_get:AipBuffer.Offsets32)
  return offsets32_.Get(index);
}
 void AipBuffer::set_offsets32(int index, ::google::protobuf::uint32 value) {
  offsets32_.Set(index, value);
  // @@protoc_insertion_point(field_set:AipBuffer.Offsets32)
}
 void AipBuffer::add_offsets32(::google::protobuf::uint32 value) {
  offsets32_.Add(value);
  // @@protoc_insertion_point(field_add:AipBuffer.Offsets32)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AipBuffer::offsets32() const {
  // @@protoc_insertion_point(field_list:AipBuffer.Offsets32)
  return offsets32_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AipBuffer::mutable_offsets32() {
  // @@protoc_insertion_point(field_mutable_list:AipBuffer.Offsets32)
  return &offsets32_;
}

// optional bytes Buffer32 = 6;
bool AipBuffer::has_buffer32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AipBuffer::set_has_buffer32() {
  _has_bits_[0] |= 0x00000020u;
}
void AipBuffer::clear_has_buffer32() {
  _has_bits_[0] &= ~0x00000020u;
}
void AipBuffer::clear_buffer32() {
  buffer32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer32();
}
 const ::std::string& AipBuffer::buffer32() const {
  // @@protoc_insertion_point(field_get:AipBuffer.Buffer32)
  return buffer32_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AipBuffer::set_buffer32(const ::std::string& value) {
  set_has_buffer32();
  buffer32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AipBuffer.Buffer32)
}
 void AipBuffer::set_buffer32(const char* value) {
  set_has_buffer32();
  buffer32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AipBuffer.Buffer32)
}
 void AipBuffer::set_buffer32(const void* value, size_t size) {
  set_has_buffer32();
  buffer32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.Buffer32)
}
 ::std::string* AipBuffer::mutable_buffer32() {
  set_has_buffer32();
  // @@protoc_insertion_point(field_mutable:AipBuffer.Buffer32)
  return buffer32_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AipBuffer::release_buffer32() {
  clear_has_buffer32();
  return buffer32_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AipBuffer::set_allocated_buffer32(::std::string* buffer32) {
  if (buffer32 != NULL) {
    set_has_buffer32();
  } else {
    clear_has_buffer32();
  }
  buffer32_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer32);
  // @@protoc_insertion_point(field_set_allocated:AipBuffer.Buffer32)
}

// repeated uint32 Offsets64 = 7;
int AipBuffer::offsets64_size() const {
  return offsets64_.size();
}
void AipBuffer::clear_offsets64() {
  offsets64_.Clear();
}
 ::google::protobuf::uint32 AipBuffer::offsets64(int index) const {
  // @@protoc_insertion_point(field_get:AipBuffer.Offsets64)
  return offsets64_.Get(index);
}
 void AipBuffer::set_offsets64(int index, ::google::protobuf::uint32 value) {
  offsets64_.Set(index, value);
  // @@protoc_insertion_point(field_set:AipBuffer.Offsets64)
}
 void AipBuffer::add_offsets64(::google::protobuf::uint32 value) {
  offsets64_.Add(value);
  // @@protoc_insertion_point(field_add:AipBuffer.Offsets64)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AipBuffer::offsets64() const {
  // @@protoc_insertion_point(field_list:AipBuffer.Offsets64)
  return offsets64_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AipBuffer::mutable_offsets64() {
  // @@protoc_insertion_point(field_mutable_list:AipBuffer.Offsets64)
  return &offsets64_;
}

// optional bytes Buffer64 = 8;
bool AipBuffer::has_buffer64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AipBuffer::set_has_buffer64() {
  _has_bits_[0] |= 0x00000080u;
}
void AipBuffer::clear_has_buffer64() {
  _has_bits_[0] &= ~0x00000080u;
}
void AipBuffer::clear_buffer64() {
  buffer64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer64();
}
 const ::std::string& AipBuffer::buffer64() const {
  // @@protoc_insertion_point(field_get:AipBuffer.Buffer64)
  return buffer64_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AipBuffer::set_buffer64(const ::std::string& value) {
  set_has_buffer64();
  buffer64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AipBuffer.Buffer64)
}
 void AipBuffer::set_buffer64(const char* value) {
  set_has_buffer64();
  buffer64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AipBuffer.Buffer64)
}
 void AipBuffer::set_buffer64(const void* value, size_t size) {
  set_has_buffer64();
  buffer64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.Buffer64)
}
 ::std::string* AipBuffer::mutable_buffer64() {
  set_has_buffer64();
  // @@protoc_insertion_point(field_mutable:AipBuffer.Buffer64)
  return buffer64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AipBuffer::release_buffer64() {
  clear_has_buffer64();
  return buffer64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AipBuffer::set_allocated_buffer64(::std::string* buffer64) {
  if (buffer64 != NULL) {
    set_has_buffer64();
  } else {
    clear_has_buffer64();
  }
  buffer64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer64);
  // @@protoc_insertion_point(field_set_allocated:AipBuffer.Buffer64)
}

// repeated string SystemModules = 9;
int AipBuffer::systemmodules_size() const {
  return systemmodules_.size();
}
void AipBuffer::clear_systemmodules() {
  systemmodules_.Clear();
}
 const ::std::string& AipBuffer::systemmodules(int index) const {
  // @@protoc_insertion_point(field_get:AipBuffer.SystemModules)
  return systemmodules_.Get(index);
}
 ::std::string* AipBuffer::mutable_systemmodules(int index) {
  // @@protoc_insertion_point(field_mutable:AipBuffer.SystemModules)
  return systemmodules_.Mutable(index);
}
 void AipBuffer::set_systemmodules(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AipBuffer.SystemModules)
  systemmodules_.Mutable(index)->assign(value);
}
 void AipBuffer::set_systemmodules(int index, const char* value) {
  systemmodules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AipBuffer.SystemModules)
}
 void AipBuffer::set_systemmodules(int index, const char* value, size_t size) {
  systemmodules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AipBuffer.SystemModules)
}
 ::std::string* AipBuffer::add_systemmodules() {
  return systemmodules_.Add();
}
 void AipBuffer::add_systemmodules(const ::std::string& value) {
  systemmodules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AipBuffer.SystemModules)
}
 void AipBuffer::add_systemmodules(const char* value) {
  systemmodules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AipBuffer.SystemModules)
}
 void AipBuffer::add_systemmodules(const char* value, size_t size) {
  systemmodules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AipBuffer.SystemModules)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
AipBuffer::systemmodules() const {
  // @@protoc_insertion_point(field_list:AipBuffer.SystemModules)
  return systemmodules_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
AipBuffer::mutable_systemmodules() {
  // @@protoc_insertion_point(field_mutable_list:AipBuffer.SystemModules)
  return &systemmodules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
